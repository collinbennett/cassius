.. automodule:: cassius.utilities

Utilities
---------

The ``utilities`` subpackage contains a set of convenience functions
that provide low-level access to plot structures.  The convenience
functions that are more mathematical are in the `mathtools
<reference_mathtools>`_ subpackage.

Pretty-printing
^^^^^^^^^^^^^^^

.. autofunction:: unicode_number

.. container::

   This function is usually used in plot axes, so that minus signs and
   scientific notation are properly displayed.  (We assume that SVG
   renderers can handle Unicode.)

   ::

      >>> from cassius import *
      >>> unicode_number(-5.3e-12)
      u'\u20125.3\xd710\u207b\xb9\xb2'
      >>> print unicode_number(-5.3e-12)
      ‒5.3×10⁻¹²

Specifying grids and tick-marks
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Tick-marks are specified as Python dictionaries.  The keys of these
dictionaries are positions of the marks and the values are strings to
be displayed under the marks.  The keys must all be numbers, and the
values must either be strings or ``None`` for short, unlabeled ticks.
(Use the empty string for long, unlabled ticks.)  Long and short ticks
are usually alternated for a ruler effect.

.. container::

   Five examples of tick-marks:

      * h1: automatically generated
      * h2: explicitly defined
      * h3: generated by a mapping (list comprehension)
      * h4: short ticks with no label
      * h5: using a rounding function from `mathtools <reference_mathtools#rounding-numbers>`_

   ::

      >>> from cassius import *

      >>> h1 = Histogram(10, 0, 1)
      >>> h2 = Histogram(10, 0, 1, xticks={0.2: "one", 0.5: "two", 0.8: "three"})
      >>> h3 = Histogram(10, 0, 1, xticks=dict([(x, str(x)) for x in 0.2, 0.5, 0.8]))
      >>> h4 = Histogram(10, 0, 1, xticks=dict([(x, None) for x in 0.2, 0.5, 0.8]))
      >>> h5 = Histogram(10, 0, 1, xticks=dict([(x, str_sigfigs(x, 3)) for x in 0.2, 0.5, 0.8]))

      >>> draw(Layout(5, 1, h1, h2, h3, h4, h5),
      ...      bottommargin=0.2, fileName="Utilities_tickmarks.svg")

   .. image:: PLOTS/Utilities_tickmarks.png

The following functions automate the process of producing tick-mark
dictionaries.
      
.. autofunction:: regular
.. autofunction:: tickmarks

Auto-generating ranges and binnings
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Unless specified, axis ranges for plots and histogram granularities
are automatically determined from the data.  There are multiple ways
to that, so there are multiple functions that can be plugged into the
plot containers.

.. container::

   For example, ``calcrange`` calculates axis ranges large enough to
   see all points in the dataset, while ``calcrange_quartile``
   calculates ranges large enough to see the bulk of the
   distribution.  The former is desirable if you want to see all
   points in the distribution; the latter is desirable if you don't
   care about tails.

   ::

      >>> from cassius import *
      >>> from random import gammavariate   # distribution with long tails

      >>> small = [gammavariate(1., 10.) for i in xrange(100)]
      >>> medium = [gammavariate(1., 10.) for i in xrange(10000)]
      >>> large = [gammavariate(1., 10.) for i in xrange(1000000)]

      >>> calcrange(small)[1], calcrange(medium)[1], calcrange(large)[1]
      (62.335325174899985, 100.0581117522074, 156.65444966695586)

      >>> calcrange_quartile(small)[1], calcrange_quartile(medium)[1], calcrange_quartile(large)[1]
      (26.656426054295306, 24.873680527531288, 24.871428805700958)

   Note that the ``calcrange`` upper limit grows with the size of the
   dataset, while the ``calcrange_quartile`` upper limit is more
   independent of dataset size.

Similarly, ``binning`` partitions a range for a histogram using one
subjective rule, but others may be preferred (not yet implemented).

These functions are usually passed as to functions that build
scatter-plot and histogram containers.

.. autofunction:: calcrange
.. autofunction:: calcrange_quartile
.. autofunction:: binning

Converting timestrings
^^^^^^^^^^^^^^^^^^^^^^

Conversions between time strings and numbers of seconds since ``t0``.
These are used by the ``TimeSeries`` class, but can also be used on
their own.

.. autofunction:: timesec
.. autofunction:: fromtimestring
.. autofunction:: totimestring
.. autofunction:: timeticks
